package com.expense.claim.controller;

import com.expense.claim.models.Commitment;
import com.expense.claim.models.Department;
import com.expense.claim.models.User;
import com.expense.claim.models.UserDepartment;
import com.expense.claim.payload.response.MessageResponse;
import com.expense.claim.payload.response.UserInfoResponse;
import com.expense.claim.repository.CommitmentRepository;
import com.expense.claim.repository.DepartmentRepository;
import com.expense.claim.repository.UserDepartmentRepository;
import com.expense.claim.repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/commitments")
public class CommitmentController {

    @Autowired
    private CommitmentRepository commitmentRepository;

    @Autowired
    private DepartmentRepository departmentRepository;
    
    @Autowired
    private UserController userController;
    
    @Autowired
    private UserDepartmentRepository userDepartmentRepository;

    @Autowired
    private UserRepository userRepository;

    // **Create a new commitment**
    @PostMapping
    public ResponseEntity<?> createCommitment(@Valid @RequestBody Commitment commitmentRequest) {
        // Retrieve the current requestor from the JWT token
        ResponseEntity<UserInfoResponse> currentUserResponse = userController.getCurrentUserInfo();
        
        if (currentUserResponse.getStatusCode().is4xxClientError()) {
            return ResponseEntity.status(401).body(new MessageResponse("Error: Unauthorized!"));
        }

        UserInfoResponse currentUser = currentUserResponse.getBody();
        if (currentUser == null) {
            return ResponseEntity.status(500).body(new MessageResponse("Error: Unable to retrieve user information."));
        }

        
		// Fetch the full UserDepartment mapping from the database
        Optional<UserDepartment> userDepartmentOptional = userDepartmentRepository.findByUserId(currentUser.getId());

        if (userDepartmentOptional.isEmpty()) {
            return ResponseEntity.badRequest().body(new MessageResponse("Error: No department mapping found for the user."));
        }

        UserDepartment userDepartment = userDepartmentOptional.get();

        // Set required fields
        commitmentRequest.setRequestor(userDepartment.getUser());
        commitmentRequest.setDepartment(userDepartment.getDepartment());
        commitmentRequest.setCreatedAt(LocalDateTime.now());
        commitmentRequest.setApproved(false);
        commitmentRequest.setPaid(false);

        // Save the commitment
        Commitment commitment = commitmentRepository.save(commitmentRequest);
        return ResponseEntity.ok(commitment);
    }



    
    
    

    // **Get all commitments**
    @GetMapping
    public ResponseEntity<List<Commitment>> getAllCommitments() {
        return ResponseEntity.ok(commitmentRepository.findAll());
    }

    // **Get a commitment by ID**
    @GetMapping("/{id}")
    public ResponseEntity<?> getCommitmentById(@PathVariable Long id) {
        Optional<Commitment> commitment = commitmentRepository.findById(id);
        if (commitment.isEmpty()) {
            return ResponseEntity.badRequest().body(new MessageResponse("Error: Commitment not found!"));
        }
        return ResponseEntity.ok(commitment.get());
    }

    // **Update a commitment**
    @PutMapping("/{id}")
    public ResponseEntity<?> updateCommitment(@PathVariable Long id, @Valid @RequestBody Commitment commitmentRequest) {
        Optional<Commitment> existingCommitment = commitmentRepository.findById(id);
        if (existingCommitment.isEmpty()) {
            return ResponseEntity.badRequest().body(new MessageResponse("Error: Commitment not found!"));
        }

        Commitment commitment = existingCommitment.get();
        commitment.setDescription(commitmentRequest.getDescription());
        commitment.setAmount(commitmentRequest.getAmount());
        commitment.setApproved(commitmentRequest.isApproved());
        commitment.setPaid(commitmentRequest.isPaid());
        commitment.setApprovedAt(commitmentRequest.isApproved() ? LocalDateTime.now() : null);

        commitmentRepository.save(commitment);
        return ResponseEntity.ok(new MessageResponse("Commitment updated successfully!"));
    }

    // **Delete a commitment**
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteCommitment(@PathVariable Long id) {
        if (!commitmentRepository.existsById(id)) {
            return ResponseEntity.badRequest().body(new MessageResponse("Error: Commitment not found!"));
        }

        commitmentRepository.deleteById(id);
        return ResponseEntity.ok(new MessageResponse("Commitment deleted successfully!"));
    }

    // **Get all commitments by department**
    @GetMapping("/department/{departmentId}")
    public ResponseEntity<List<Commitment>> getCommitmentsByDepartmentId(@PathVariable Long departmentId) {
        List<Commitment> commitments = commitmentRepository.findByDepartmentId(departmentId);
        return ResponseEntity.ok(commitments);
    }

    // **Get all approved commitments**
    @GetMapping("/approved")
    public ResponseEntity<List<Commitment>> getApprovedCommitments() {
        List<Commitment> approvedCommitments = commitmentRepository.findByApproved(true);
        return ResponseEntity.ok(approvedCommitments);
    }

    // **Get all unpaid commitments**
    @GetMapping("/unpaid")
    public ResponseEntity<List<Commitment>> getUnpaidCommitments() {
        List<Commitment> unpaidCommitments = commitmentRepository.findByPaid(false);
        return ResponseEntity.ok(unpaidCommitments);
    }
}
