package com.expense.claim.controller;

import com.expense.claim.models.ExpenseHeader;
import com.expense.claim.models.ExpenseLineItem;
import com.expense.claim.models.UserDepartment;
import com.expense.claim.payload.response.ExpenseHeaderResponse;
import com.expense.claim.payload.response.MessageResponse;
import com.expense.claim.repository.ExpenseHeaderRepository;
import com.expense.claim.repository.ExpenseLineItemRepository;
import com.expense.claim.repository.ExpenseTypeRepository;
import com.expense.claim.repository.UserDepartmentRepository;
import com.expense.claim.security.services.UserDetailsImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Optional;

@RestController
@RequestMapping("/api/expenses")
public class ExpenseController {

    @Autowired
    private ExpenseHeaderRepository expenseHeaderRepository;

    @Autowired
    private ExpenseLineItemRepository expenseLineItemRepository;

    @Autowired
    private UserDepartmentRepository userDepartmentRepository;

    @Autowired
    private ExpenseTypeRepository expenseTypeRepository;

    // **Create Expense Header**
    @PostMapping("/header")
    public ResponseEntity<?> createExpenseHeader(@Valid @RequestBody ExpenseHeader expenseHeaderRequest) {
        // Retrieve the current user info (requestor)
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetailsImpl currentUser = (UserDetailsImpl) authentication.getPrincipal();

        // Fetch the department for the current user
        Optional<UserDepartment> userDepartmentOptional = userDepartmentRepository.findByUserId(currentUser.getId());
        if (userDepartmentOptional.isEmpty()) {
            return ResponseEntity.badRequest().body(new MessageResponse("Error: No department mapping found for the user."));
        }

        UserDepartment userDepartment = userDepartmentOptional.get();

        // Set requestor and header details
        expenseHeaderRequest.setRequestorId(currentUser.getId());
        expenseHeaderRequest.setDepartment(userDepartment.getDepartment());
        expenseHeaderRequest.setCreatedAt(LocalDateTime.now());
        expenseHeaderRequest.setTotalAmount(BigDecimal.ZERO);
        expenseHeaderRequest.setSubmitted(false);  // Default submitted value is 0

        // Save the expense header
        ExpenseHeader savedHeader = expenseHeaderRepository.save(expenseHeaderRequest);
        ExpenseHeaderResponse response = new ExpenseHeaderResponse(savedHeader.getId(), savedHeader.getDescription(), savedHeader.getDepartment().getName());
        return ResponseEntity.ok(response);
    }

}
