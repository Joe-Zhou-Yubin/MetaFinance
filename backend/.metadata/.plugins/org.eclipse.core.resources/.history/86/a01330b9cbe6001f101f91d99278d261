package com.expense.claim.controller;

import com.expense.claim.models.ExpenseHeader;
import com.expense.claim.models.ExpenseLineItem;
import com.expense.claim.payload.response.MessageResponse;
import com.expense.claim.repository.ExpenseHeaderRepository;
import com.expense.claim.repository.ExpenseLineItemRepository;
import com.expense.claim.repository.ExpenseTypeRepository;
import com.expense.claim.security.services.UserDetailsImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Optional;

@RestController
@RequestMapping("/api/expenses")
public class ExpenseController {

    @Autowired
    private ExpenseHeaderRepository expenseHeaderRepository;

    @Autowired
    private ExpenseLineItemRepository expenseLineItemRepository;

    @Autowired
    private ExpenseTypeRepository expenseTypeRepository;

    // **Create a new expense**
    @PostMapping
    public ResponseEntity<?> createExpense(
            @Valid @RequestBody ExpenseHeader expenseHeaderRequest
    ) {
        // Retrieve the current user info (requestor)
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetailsImpl currentUser = (UserDetailsImpl) authentication.getPrincipal();

        // Set requestor and creation details in the header
        expenseHeaderRequest.setRequestorId(currentUser.getId());
        expenseHeaderRequest.setCreatedAt(LocalDateTime.now());
        expenseHeaderRequest.setTotalAmount(BigDecimal.ZERO);

        // Save the header first
        ExpenseHeader savedHeader = expenseHeaderRepository.save(expenseHeaderRequest);

        BigDecimal totalAmount = BigDecimal.ZERO;

        // Process each line item in the request
        for (ExpenseLineItem lineItem : expenseHeaderRequest.getLineItems()) {
            lineItem.setExpenseHeader(savedHeader);
            lineItem.setCreatedAt(LocalDateTime.now());

            // Validate expense type
            Optional.ofNullable(expenseTypeRepository.findById(lineItem.getExpenseType().getId()))
                    .orElseThrow(() -> new RuntimeException("Invalid Expense Type!"));

            /*
            // Placeholder for file upload logic
            if (files != null && fileIndex < files.length) {
                MultipartFile file = files[fileIndex++];
                String contentType = file.getContentType();
                if (!isValidFileType(contentType)) {
                    return ResponseEntity.badRequest().body(new MessageResponse("Error: Invalid file type!"));
                }

                try {
                    lineItem.setFileData(file.getBytes());
                    lineItem.setFileName(file.getOriginalFilename());
                } catch (Exception e) {
                    return ResponseEntity.status(500).body(new MessageResponse("Error: Unable to upload file!"));
                }
            }
            */

            // Save the line item
            expenseLineItemRepository.save(lineItem);
            totalAmount = totalAmount.add(lineItem.getAmount());
        }

        // Update the total amount in the header
        savedHeader.setTotalAmount(totalAmount);
        expenseHeaderRepository.save(savedHeader);

        return ResponseEntity.ok(new MessageResponse("Expense created successfully!"));
    }

    // Helper method to validate file type (commented out until file upload is reintroduced)
    /*
    private boolean isValidFileType(String contentType) {
        return contentType.equals("image/jpeg") || contentType.equals("image/png") || contentType.equals("application/pdf");
    }
    */
}
